// TASK 1
Accessing any array element takes O(1) time.

// TASK 2
Linear search works on unsorted arrays.

// TASK 3
In each step, binary search halves the remaining portion of the array that needs to be searched.

// TASK 4
In each run of the inner loop, insertion sort may swap two neighboring elements.

// TASK 5
In each iteration of the for loop in function selection_sort, two elements may be swapped.

// TASK 6
Merge sort runs in Î˜(n) time if the array is already sorted.

// TASK 7
Memoization avoids repeated calculation of the results of a function applied tot he same arguments.

// TASK 8
function search_cond(A, cond) {
    const len = array_length(A);
    let i = 0;
    if (len === 0) {
        return -1;
    } else {
        while (i < len ) {
            if ( cond(A[i]) ) {
                return i;
            }
                i = i + 1;
        }
    return -1;
} } 




// TASK 9

function insert(A, pos, x) {
    let j = array_length(A) - 1;
    while (j >= 0 && j >= pos) {
        A[j + 1] = A[j]; // shift right
        j = j - 1;
    }
    A[pos] = x;
}



// TASK 10
function insertion_sort(A) {
    let copy = [];
    copy[0] = A[0];
    
    for (let i = 1; i < array_length(A); i = i + 1) {
        let x = A[i];
        let cond = y => y > x;
        let pos = search_cond(copy, cond);
        if (pos !== -1) {
            insert(copy, pos, x);
        } else { 
            copy[i] = x;
        }
    }
    return copy;

}
