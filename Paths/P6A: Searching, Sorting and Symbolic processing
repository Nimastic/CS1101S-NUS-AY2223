// TASK 1
Θ(n)

// TASK 2
Θ(n^2)

// TASK 3
Θ(n^2)

// TASK 4
Θ(n^2)

// TASK 5
list(1, 3, 5, 7, 8, 6, 4, 2, 9)

// TASK 6
Unordered lists

// TASK 7
Ordered lists

// TASK 8
Ordered lists

// TASK 9
// put the first n elements of xs into a list
function take(xs, n) {
    function take_helper(xs, start, stop) {
    return start === stop
      ? null
      : pair(list_ref(xs, start), take_helper(xs, start + 1, stop));
  }
  return take_helper(xs, 0, n);
}


// drop the first n elements from list, return rest
function drop(xs, n) {
    return n === 0 ? xs : drop(tail(xs), n - 1);
}





// TASK 10
function min(a, b) {
    return a < b ? a : b;
}

// given a non-empty list xs, returns the smallest item in xs
function smallest(xs) {
    return is_null(tail(xs))
           ? head(xs)
           : smallest(append(list(min(head(xs), head(tail(xs)))), tail(tail(xs))));
}







// TASK 11
// removes the first instance of x from xs
function remove(x, xs) {
    return is_null(member(x ,xs))
           ? xs
           : x === head(xs)
           ? tail(xs)
           : append(list(head(xs)), remove(x, tail(xs)));
   
}



remove(2, list(1, 2, 3, 4));




// TASK 12
function selection_sort(xs) {
    if (is_null(xs)) {
        return null;
    } else {
        return append(list(smallest(xs)), selection_sort(remove(smallest(xs), xs)));
        // What should we recurse on?
        // YOUR SOLUTION HERE
    }
}


selection_sort(list(6, 3, 1, 5));


