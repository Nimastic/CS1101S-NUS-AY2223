// TASK 1
function backward(sound) {
    return make_sound(t => get_wave(sound)( get_duration(sound) - t ), get_duration(sound));
}



// play(backward(my_voice()));


//                                      // step 0: press "Run"

// init_record();                       // step 1 in REPL

// const my_voice = record_for(2, 0.2); // step 2 in REPL

// play(backward(my_voice()));          // step 3 in REPL


// TASK 2
function repeat(n, sound) {
    
    return n === 0
           ? silence_sound(0)
           : consecutively(list((sound), repeat(n - 1, sound)));
}

// Test
const my_sound = consecutively(
    list(sine_sound(400, 1), sine_sound(800, 1)));
const my_repeated = repeat(3, my_sound);
play(my_repeated);

// TASK 3
function fast_forward(n, sound) {
    /* replace dummy below with your solution */
    return make_sound( t=> get_wave(sound)( t * n ), get_duration(sound) / n);
}

//                                      // step 0: press "Run"

// init_record();                       // step 1 in REPL

// const my_voice = record_for(2, 0.2); // step 2 in REPL

// play(fast_forward(2, my_voice()));   // step 3 in REPL


// TASK 4




function echo(n, d, sound) {
    
    function delay(n, d, sound) {
        return n === 0
           ? sound
           : consecutively(list(
               silence_sound(d), 
               delay(n - 1, d, make_sound( t => 1/2 * get_wave(sound)(t) , get_duration(sound)))));
          
    }
    return n === 0
           ? sound
           : simultaneously(list(delay(n, d, sound), echo(n-1, d, sound)));
}

/*
function echo(n, d, sound) {
    const halfwave = t => 1/2 * get_wave(sound)(t);
    return n === -1
           ? silence_sound(0)
           : consecutively(list(sound, silence_sound(get_duration(test_sound) - d), echo(n - 1, d, 
                        make_sound(halfwave , get_duration(sound)))));
}

function sine_sound(freq, duration) {
    const wave = t => math_sin(2 * math_PI * freq * t);
    return make_sound(wave, duration);
}

function halved(sound) {
    const halfwave = t => 1/100 * get_wave(sound)(t);
    return make_sound(halfwave, get_duration(sound));
} */
// Test


const test_sound = sine_sound(800, 2);
play(echo(2, 1, test_sound));
play(echo(2, 2, test_sound));

/*
const test_sound2 = sine_sound(800, 2);
play(test_sound);
play(halved(test_sound2));
play(echo(2, 0.4, test_sound));
get_duration(test_sound) + 1;*/



// TASK 5
// Copy your functions backward, repeat,
// fast_forward and echo here.

function make_alien_jukebox(sound) {
   return x => x === 0
            ? play(sound)
            : x === 1
            ? play(backward(sound))
            : x === 2
            ? play(half(2, sound))
            : x === 3
            ? play(repeat(3, fast_forward(2, sound)))
            : play(echo(4, 0.3, backward(sound)));
}

function echo(n, d, sound) {
    
    function delay(n, d, sound) {
        return n === 0
           ? sound
           : consecutively(list(
               silence_sound(d), 
               delay(n - 1, d, make_sound( t => 1/2 * get_wave(sound)(t) , get_duration(sound)))));
          
    }
    return n === 0
           ? sound
           : simultaneously(list(delay(n, d, sound), echo(n-1, d, sound)));
}



function half(n, sound) {
    /* replace dummy below with your solution */
    return make_sound( t=> get_wave(sound)( t / n ), get_duration(sound) * n);
}

function fast_forward(n, sound) {
    /* replace dummy below with your solution */
    return make_sound( t=> get_wave(sound)( t * n ), get_duration(sound) / n);
}


function repeat(n, sound) {
    
    return n === 0
           ? silence_sound(0)
           : consecutively(list((sound), repeat(n - 1, sound)));
}


function backward(sound) {
    return make_sound(t => get_wave(sound)( get_duration(sound) - t ), get_duration(sound));
}



// Press "Run"

// Then test in REPL:

// init_record();

// const erksh_voice = record_for(1, 0.2);

// const j = make_alien_jukebox(erksh_voice());

// j(0);  // plays original recording

// j(1);  // plays it backward

// j(2);  // plays it at half speed

// j(3);  // plays it at double speed, three times in a row

// j(4);  // plays it backward with 4-times echo,
//        //     with 0.3 seconds echo delay
