// TASK 1
const increment_repeater =
    repeater => 
        f => x => f(repeater(f)(x));    // complete the
                        // lambda expression
/*
STEPPERS

const thrice = (repeater => f => x => f(repeater(f)(x)))(f => x => f(f(x)));  
// (f => x => f(f(x))) into repeater function
-> const thrice = f => x => f((f => x => f(f(x)))(f)(x));


const thrice = increment_repeater(twice);
// thrice replaces increment_repeater(twice)
-> const warn = (f => x => f((f => x => f(f(x)))(f)(x)))(display);
// display into f of f => x =>
-> const warn = x => display((f => x => f(f(x)))(display)(x));
warn("ALERT");
// const warn declared and substituted into rest of block
-> (x => display((f => x => f(f(x)))(display)(x)))("ALERT");
// display into f of f => x =>
-> display((f => x => f(f(x)))(display)("ALERT"));
-> display((x => display(display(x)))("ALERT"));
// "ALERT" substituted into x of x => display....

hence display(display(display("ALERT")));

*/


const twice = f => x => f(f(x));
const thrice = increment_repeater(twice);
const fourtimes = increment_repeater(thrice);
const warn = thrice(display);
warn("ALERT");          // should display "ALERT"
                        // three times in orange
const bigwarn = fourtimes(display);
bigwarn("A L E R T");   // should display "A L E R T"
                        // four times in orange
                        // (the REPL will display
                        // "A L E R T"a fifth time
                        // [in white] as the value
                        // returned by bigwarn)
                        
                        
                        
// TASK 2
const pair = (x, y) => f => f(x, y);

const head = p => p((x, y) => x); //complete lambda expression
const tail = p => p((x, y) => y);  // complete lambda expression

head(pair(1, 2)) === 1; // should return true
tail(pair(1, 2)) === 2; // should return true


/*

const pair = (x, y) => f => f(x, y);
// (x, y) => f => f(x, y); into head(pair(1, 2)) === 1;
-> head(((x, y) => f => f(x, y))(1, 2)) === 1;
// head = p => p(x, y) => x; into head(((x, y) => f => f(x, y))(1, 2)) === 1;
-> (p => p(x, y) => x)(((x, y) => f => f(x, y))(1, 2))
// (1, 2) in (x, y)
-> (p => p(x, y) => x)(f => f(1, 2))
// (f => f(1, 2)) in (p => p(x, y) => x)
-> (f => f(1, 2))((x, y) => x) 
-> ((x, y) => x)(1, 2) 
-> 1 === 1 : true

*/

// TASK 3
/*

enter your answer here; no explanation required

Î©(g(n)), where g(n) means the growth rate of decrement_repeater(repeater)

*/


// TASK 4
const zero_repeater = f => x => x;
const one_repeater = f => x => f(zero_repeater, () => zero_repeater(f)(x));
const two_repeater = f => x => f(one_repeater, () => one_repeater(f)(x));
const three_repeater = f => x => f(two_repeater, () => two_repeater(f)(x));

const to_int = repeater => repeater((iter_count, x) => x() + 1)(0);

const increment_repeater = 
    repeater => f => x => f(repeater, () => repeater(f)(x));

const add_repeaters = 
    (repeater1, repeater2) => f => x => repeater2(f)(repeater1(f)(x));

to_int(add_repeaters(two_repeater,
                     three_repeater));  // should return 5
                     
                    
/* 
3 -> 2 -> 1 -> 0 (3)
2 -> 1 -> 0 (2)
2 + 3 = 5

*/


// TASK 5

const zero_repeater = f => x => x;
const one_repeater = f => x => f(zero_repeater, () => zero_repeater(f)(x));
const two_repeater = f => x => f(one_repeater, () => one_repeater(f)(x));
const three_repeater = f => x => f(two_repeater, () => two_repeater(f)(x));
const four_repeater = f => x => f(three_repeater, () => three_repeater(f)(x)); 

const to_int = repeater => repeater((iter_count, x) => x() + 1)(0);

const decrement_repeater = 
    repeater => f => x => f(repeater, () => repeater(f)(x - 2));
    
// you should only use lambda expressions and function application expressions in your program. are operators still allowed?

to_int(decrement_repeater(three_repeater));  // should return 2
// to_int(decrement_repeater(four_repeater));

