// TASK 1
const B = [[3, 1, 7, 4, 2],
           [2, 1, 3, 1, 1],
           [1, 2, 2, 1, 8],
           [2, 2, 1, 5, 3],
           [2, 1, 4, 4, 4],
           [5, 7, 2, 5, 1]];
const C = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]];
 
                    
function max_flies_to_eat(A) {
    const N = array_length(A); // number of rows
    const X = array_length(A[0]);// number of columns
    let maxflies = 0;
    let maxhead = 0;
    /* function getmax(row, column){
        if (column < 0 ) {
           return 0;
        } else {
          maxflies = helper(row, column);
          maxhead = math_max(maxflies, getmax(row, column - 1));
    
        }
        return maxhead;
    } */
    function helper(row, column) {
        let i = row;
        let j = column;
        let maxi = 0;
        if (i >= N) {
            return 0;
        } else if (j < 0 || j >= X) {
            return 0;
        } else {
        maxi = math_max( helper(i+1, j-1), helper(i+1, j), helper(i+1, j+1)) + A[i][j];
        return maxi;
    }
}
    
    for(let j = 0; j < X; j = j + 1) {
        maxhead = math_max(maxhead, helper(0, j));
    }
    return maxhead;
}

  
max_flies_to_eat(B);

// TASK 2

const C = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]];
           
let mem = [];

function read(n, k) {
    return mem[n] === undefined
           ? undefined
           
           : mem[n][k];
}

function write(n, k, value) {
    if (mem[n] === undefined) {
        mem[n] = [];
    }
    mem[n][k] = value;
}

function memo_max_flies_to_eat(A) {
    mem = [];
    const N = array_length(A); // number of rows
    const X = array_length(A[0]);// number of columns
    let maxi = 0;
    
    function helper(i, j) {
        if (read(i, j) !== undefined) {
            return read(i, j);
        } else {
            if (i >= N) {
                return 0;
            } else if (j < 0 || j >= X) {
                return 0;
            } else {
                let bottomleft = helper(i+1, j-1);
                let bottomdown = helper(i+1, j);
                let bottomright = helper(i+1, j+1);
                let results = A[i][j] + math_max(bottomleft, bottomdown, bottomright);
                write(i, j, results);
                return results;
            }
        }
    }
    
    for(let j = 0; j < X; j = j + 1) {
        maxi = math_max(maxi, helper(0, j));
    }
    return maxi;

}

//TEST:
const B = [[3, 1, 7, 4, 2],
                    [2, 1, 3, 1, 1],
                    [1, 2, 2, 1, 8],
                    [2, 2, 1, 5, 3],
                    [2, 1, 4, 4, 4],
                    [5, 7, 2, 5, 1]];

memo_max_flies_to_eat(B); // Expected result: 32
