// TASK 1
const connect_numbers =
    n => draw_connected_full_view(n)(unit_circle);

connect_numbers(10);
connect_numbers(5);// returns a Drawing of a pentagon

// TASK 2
const connect_results =
    (n, f) =>
        draw_connected_full_view(n)
        (t => unit_circle(f(math_round(t * n)) / n));
        
/* connect_results(5, (k => 2 * k))
draw_connected_full_view(n)(t => unit_circle(f(math_round(t * n)) / n)(k => 2 * k))
draw_connected_full_view(5)(t => unit_circle((k => 2 * k)(math_round(t * 5)) / 5))
t = 0,   t * 5 = 0, unit_circle(0)
t = 0.2, t * 5 = 1  unit_circle(0.2)
t = 0.4, t * 5 = 2  unit_circle(0.4)
t = 0.6, t * 5 = 3  unit_circle(0.6)
t = 0.8, t * 5 = 4  unit_circle(0.8)
t = 1,   t * 5 = 5  unit_circle(1)

*/
const star = 
   (n, step) => connect_results(n, k => step * k);

    // your answer goes here
connect_results(5, (k => 2 * k));
connect_results(11, (k => 4 * k));
// star(11, 4) looks like connect_results(11, (k => 4 * k))
star(11, 4);



// TASK 3
const connect_results =
    (n, f) =>
        draw_connected_full_view(n)
        (t => unit_circle(f(math_round(t * n)) / n));

/* Please ignore my texts as they are my rough workings 
connect_results(5, (k => 2 * k))
draw_connected_full_view(n)(t => unit_circle(f(math_round(t * n)) / n)(k => 2 * k))
draw_connected_full_view(5)(t => unit_circle((k => 2 * k)(math_round(t * 5)) / 5))
n = 8 
t = 0       t * 8 = 0, unit_circle(0)
t = 0.125   t * 8 = 1  unit_circle(0.2)
t = 0.25    t * 8 = 2  unit_circle(0.4)
t = 0.375   t * 8 = 3  unit_circle(0.6)
t = 0.5     t * 8 = 4  unit_circle(0.8)
t = 0.625   t * 8 = 5  unit_circle(1)
t = 0.75    t * 8 = 6
t = 0.875   t * 8 = 7
t = 1       t * 8 = 8

n = 100
t = 0.01 
...
t = 100
*/


const wheel = 
    n => 
        connect_results((n * 3), 
        k => { const v = 3 * math_round((k - 1) / 3);
                return k % 3 === 1 ? v + 1.5 * n : v; }
                        );
    

//when 
//connect_results(24, k => { const v = 3 * math_round((k - 1) / 3);
//           return k % 3 === 1 ? v + 12: v; } );
// gives us wheel(8) hence, 24/8 = 3 , but doesn't give us wheel(100);  
wheel(8); // 12, 36, 60, 84, 108, 132
// i found out by playing around v + (factor), i was able to 
// work out that the ratio was 1.5n
wheel(100); // 150, 450, 750 (1.5n)

wheel(50);


// TASK 4
const connect_results =
    (n, f) =>
        draw_connected_full_view(n)
        (t => unit_circle(f(math_round(t * n)) / n));

const connect_laps =
    (n, g) =>
    connect_results(n * 3,
                    k => { const v = math_round((k - 1) / 3);
                           return k % 3 === 1 ? g(v)*3 : v * 3; }
                   );


//connect_laps(8, k => k + 4); // draws wheel with 8 spokes

//connect_laps(5, k => k + 2); // pentagram within pentagon

const draw_times_table =
    (n, m) => connect_laps(n , k => k * m);
    
draw_times_table(395, 100);
  

draw_times_table(100, 2);      // m = 2: cardioid: 1 lobe
draw_times_table(100, 3);      // m = 3: nephroid: 2 lobes
draw_times_table(100, 4);      // m = 4: 3 lobes...

draw_times_table(397, 200);    // m = (n + 3) / 2: cardioid
draw_times_table(500, 252);    // m = (n + 4) / 2: nephroid
draw_times_table(501, 253);    // m = (n + 5) / 2: 3 lobes...

draw_times_table(500, 168);    // m = (n + 4) / 3: cardioid
draw_times_table(295, 100);    // m = (n + 5) / 3: nephroid
draw_times_table(594, 200);    // m = (n + 6) / 3: 3 lobes...

draw_times_table(395, 100);    // m = (n + 5) / 4: cardioid
draw_times_table(494, 100);    // m = (n + 6) / 5: cardioid
draw_times_table(593, 100);    // m = (n + 7) / 6: cardioid...

// also nice:
draw_times_table(400, 201);    // m = n / 2 + 1 (/4,/8,/16)
draw_times_table(200, 99);     // m = (n / 2) - 1: square pattern
