// TASK 1

function d_split_list(xs) {
    const firstlen = length(xs) % 2 === 0 
                     ? length(xs)/2 
                     : math_floor(length(xs)/2) + 1;
    let first = xs;
    let second = null;
    /*
    if (length(xs) % 2 === 0)
    { let firstlen = len / 2;
      let secondlen = len / 2; }
      else {
        let firstlen = math_floor(len/2) + 1;
        let secondlen = math_floor(len/2);
      } */
     let i = 0;
     while (i < firstlen - 1)
            { first = tail(first); //3,2,1 or 3,4,5,6
              i = i + 1; 
            } 
    second = tail(first); // 2, 1 or 4, 5, 6
    set_tail(first, null); // modifies first -> xs
            
    return pair(xs, second);
    
}



// TEST:
const my_list1 = list(1, 2, 3, 4, 5, 6);
//const my_list2 = list(5, 4, 3, 2, 1);
d_split_list(my_list1);
//d_split_list(my_list2);

// TASK 2

function d_merge(xs, ys) {
    if (is_null(xs)) {
        return ys;
    } else if (is_null(ys)) {
        return xs;
    } else if ( head(xs) <= head(ys) ) {
        set_tail(xs, d_merge(tail(xs), ys));
        return xs;
    } else { 
        set_tail(ys, d_merge(xs, tail(ys)));
        return ys;
    } 

}

// TEST:
/*
const my_list1 = list(2, 4, 5, 9);
const my_list2 = list(3, 5, 8);
d_merge(my_list1, my_list2); */

const my_list1 = list(1, 5, 11, 12);
const my_list2 = list(3, 6, 7);
d_merge(my_list1, my_list2);

// TASK 3

function d_split_list(xs) {
    const firstlen = length(xs) % 2 === 0 
                     ? length(xs)/2 
                     : math_floor(length(xs)/2) + 1;
    let first = xs;
    let second = null;
     let i = 0;
     while (i < firstlen - 1)
            { first = tail(first); 
              i = i + 1; 
            } 
    second = tail(first); 
    set_tail(first, null); 
            
    return pair(xs, second);
    
}


function d_merge(xs, ys) {
    if (is_null(xs)) {
        return ys;
    } else if (is_null(ys)) {
        return xs;
    } else if ( head(xs) <= head(ys) ) {
        set_tail(xs, d_merge(tail(xs), ys));
        return xs;
    } else { 
        set_tail(ys, d_merge(xs, tail(ys)));
        return ys;
    } 

}

function d_merge_sort(xs) {

    if ( is_null(xs) || is_null(tail(xs))) {
        return xs;
    } else {
    const dsl = d_split_list(xs);
    const left = head(dsl);
    const right = tail(dsl);
    const merged = d_merge(d_merge_sort(left), d_merge_sort(right));
    
    return merged;

} }

// TEST:
const my_list = list(7, 2, 4, 6, 9, 1, 5, 8, 3, 6);
d_merge_sort(my_list);v
