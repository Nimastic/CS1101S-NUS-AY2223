// Task 1

// Function type: Number -> pair_of_numbers
// where input is between 0 - 15 inclusive.
// where 0 - 9 represent the digits
// 10 represents *, 11 represents #,
// and 12 - 15 represent the letters A-D.
/* 


*/


function get_dtmf_frequencies(number) {
    const dtmfdata = list(
        pair(941, 1336), // 0
        pair(697, 1209), // 1
        pair(697, 1336), // 2
        pair(697, 1477), // 3
        pair(770, 1209), // 4
        pair(770, 1336), // 5
        pair(770, 1477), // 6
        pair(852, 1209), // 7
        pair(852, 1336), // 8
        pair(852, 1477), // 9
        pair(941, 1209), // *
        pair(941, 1477), // #
        pair(697, 1633), // A
        pair(770, 1633), // B
        pair(852, 1633), // C
        pair(941, 1633) // D
    );
    return list_ref(dtmfdata, number);
}


get_dtmf_frequencies(5);
get_dtmf_frequencies(10);

// Task 2

function get_dtmf_frequencies(number) {
    const dtmfdata = list(
        pair(941, 1336), // 0
        pair(697, 1209), // 1
        pair(697, 1336), // 2
        pair(697, 1477), // 3
        pair(770, 1209), // 4
        pair(770, 1336), // 5
        pair(770, 1477), // 6
        pair(852, 1209), // 7
        pair(852, 1336), // 8
        pair(852, 1477), // 9
        pair(941, 1209), // *
        pair(941, 1477), // #
        pair(697, 1633), // A
        pair(770, 1633), // B
        pair(852, 1633), // C
        pair(941, 1633) // D
    );
    return list_ref(dtmfdata, number);
}

function make_dtmf_tone(frequency_pair) {
    const tone1 = sine_sound(head(frequency_pair), 0.5);
    const tone2 = sine_sound(tail(frequency_pair), 0.5);
    return simultaneously(list(tone1, tone2));
}


/*
const frequency_pair = pair(941, 1209);
const tone1 = sine_sound(head(frequency_pair), 0.5);
const tone2 = sine_sound(tail(frequency_pair), 0.5);
play(simultaneously(list(tone1, tone2)));
*/

play(make_dtmf_tone(get_dtmf_frequencies(10)));

// Task 3

function get_dtmf_frequencies(number) {
    const dtmfdata = list(
        pair(941, 1336), // 0
        pair(697, 1209), // 1
        pair(697, 1336), // 2
        pair(697, 1477), // 3
        pair(770, 1209), // 4
        pair(770, 1336), // 5
        pair(770, 1477), // 6
        pair(852, 1209), // 7
        pair(852, 1336), // 8
        pair(852, 1477), // 9
        pair(941, 1209), // *
        pair(941, 1477), // #
        pair(697, 1633), // A
        pair(770, 1633), // B
        pair(852, 1633), // C
        pair(941, 1633) // D
    );
    return list_ref(dtmfdata, number);
}

function make_dtmf_tone(frequency_pair) {
    const tone1 = sine_sound(head(frequency_pair), 0.5);
    const tone2 = sine_sound(tail(frequency_pair), 0.5);
    return simultaneously(list(tone1, tone2));
}

function dial(list_of_digits) {
    return is_null(tail(list_of_digits))
           ? make_dtmf_tone(get_dtmf_frequencies(head(list_of_digits)))
           : consecutively(list(
                make_dtmf_tone(get_dtmf_frequencies(head(list_of_digits))),
                consecutively(list(
                    silence_sound(0.1), dial(tail(list_of_digits))))));
}



// Test
play(dial(list(6,2,3,5,8,5,7,7)));

// Task 4

function get_dtmf_frequencies(number) {
    const dtmfdata = list(
        pair(941, 1336), // 0
        pair(697, 1209), // 1
        pair(697, 1336), // 2
        pair(697, 1477), // 3
        pair(770, 1209), // 4
        pair(770, 1336), // 5
        pair(770, 1477), // 6
        pair(852, 1209), // 7
        pair(852, 1336), // 8
        pair(852, 1477), // 9
        pair(941, 1209), // *
        pair(941, 1477), // #
        pair(697, 1633), // A
        pair(770, 1633), // B
        pair(852, 1633), // C
        pair(941, 1633) // D
    );
    return list_ref(dtmfdata, number);
}

function make_dtmf_tone(frequency_pair) {
    const tone1 = sine_sound(head(frequency_pair), 0.5);
    const tone2 = sine_sound(tail(frequency_pair), 0.5);
    return simultaneously(list(tone1, tone2));
}

function dial(list_of_digits) {
    return is_null(tail(list_of_digits))
           ? make_dtmf_tone(get_dtmf_frequencies(head(list_of_digits)))
           : consecutively(list(
                make_dtmf_tone(get_dtmf_frequencies(head(list_of_digits))),
                consecutively(list(
                    silence_sound(0.1), 
                    dial(tail(list_of_digits))))));
}

const evil = list(1,8,0,0,5,2,1,1,9,8,0);

function is_notevil(xs) {
    return !equal(evil, xs);
}
function is_evil(xs) {
    return equal(evil, xs);
}

function afterevil(xs) {
    return filter(is_notevil, xs);
}

function appending(list_of_numbers) {
        if (is_null(afterevil(list_of_numbers))) {
            return null;
        } else {
           return append(
               append(head(afterevil(list_of_numbers)), list(11)),
               (appending(tail(afterevil(list_of_numbers)))));
        }
}

function dial_all(list_of_numbers) {
    return dial(appending(list_of_numbers));
}

/*

is_evil(head(list_of_numbers))
           ? dial_all(tail(list_of_numbers))
           : is_list(list_of_numbers)
           ? append(accumulate(list, 11,
                          head(list_of_numbers)),
                    accumulate(list, 11,
                          tail(list_of_numbers)))
           : 0; */

// Test
 play((dial_all(
  list(
      list(1,8,0,0,5,2,1,1,9,8,0),  // not played!!!
      list(6,2,3,5,8,5,7,7),
      list(0,0,8,6,1,3,7,7,0,9,5,0,0,6,1))
  )));
